p="13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084171"
g="11717829880366207009516117596335367088558084999998952205599979459063929499736583746670572176471460312928594829675428279466566527115212748467589894601965568"
h="3239475104050450443565264378728065788649097520952449527834792452971981976143292558073856937958553180532878928001494706097394108577585732452307673444020333"

def expo(modular, num, tonum):
	if tonum<=1:
		return num**tonum
	if tonum%2==1:
		return (expo(modular,num,tonum/2)**2)%modular*num%modular
	if tonum%2==0:
		return expo(modular,num,tonum/2)**2%modular

D="22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540"
base=expo(p,g,p-2**20-1)

for i in range(2**20):
	D[h*base%p]=2**20-i
	base=base*g%p

D[h]=0
base=expo(p,g,2**20)
R=1

for i in range(2**20):
	if D.has_key(R):
		print(i,D[R],(2**20*i+D[R]))
	R=base*R%p

d=D
base=1
plain=1
while d!=0:
	if d%2!=0:
		S=S+'1'
	else:
		S=S+'0'
	d=d/2

		